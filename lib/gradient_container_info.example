// import "package:first_app/text_primary.dart";
import "package:flutter/material.dart";

const startAlignment = Alignment.topLeft;
const endAlignment = Alignment.bottomRight;

// StatelessWidget => Un widget che non pu√≤ essere sovrascritto immutabile, leggero e veloce
class GradientContainer extends StatelessWidget {
  // convenzione per ottimizzare il codice
  // andrebbe utilizzato in tutte le funzioni
  GradientContainer({super.key, required this.colors});

  final List<Color> colors;
  var activeDiceImage = 'assets/images/dice-1.png';

  void rollDice() {
    activeDiceImage = 'assets/images/dice-4.png';
    print('Chang image...');
  }

  // Override => Sovrascrittura del codice
  @override

  // Chiamo la funzione di costruzione del widget
  Widget build(context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: colors,
          begin: startAlignment,
          end: endAlignment,
        ),
      ),
      child: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Image.asset(
              activeDiceImage,
              width: 200,
            ),
            const SizedBox(
              height: 20,
            ), // Widget non visibile per non utilizzare padding
            TextButton(
              // onPressed: () {}, => QUESTA E' UNA FUNZIONE ANONIMA !!!
              onPressed: rollDice,
              style: TextButton.styleFrom(
                padding: const EdgeInsets.only(top: 20),
                foregroundColor: Colors.white,
                textStyle: const TextStyle(fontSize: 28),
              ),
              child: const Text('Lancia i Dadi'),
            )
          ],
        ),
      ),
    );
  }
}

//Button principali : ElevatedButton,  OutlinedButton, TextButton

// Le variabili posso essere inizializzate anche senza valore come in questo esempio
//   Tipo
// Alignment?     startAlignment

// const GradientContainer(this.primaryColor, this.secondaryColor, {super.key});

// final Color primaryColor, secondaryColor;
//  const GradientContainer.purple({super.key}) : primaryColor = Colors.purple, secondaryColor = Colors.purple,

// // Override => Sovrascrittura del codice
// @override

// // Chiamo la funzione di costruzione del widget
// Widget build(context) {
//   return Container(
//     decoration: BoxDecoration(
//       gradient: LinearGradient(
//         colors: [
//           primaryColor,
//           secondaryColor,
//         ],
//         begin: startAlignment,
//         end: endAlignment,
//       ),
//     ),
//     child: const Center(
//       child: TextPrimary('HELLO WORLD üê¨ !'),
//     ),
//   );
// }
